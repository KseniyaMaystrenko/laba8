import tkinter as tk  # Импортируем модуль tkinter для создания графического интерфейса
from tkinter import messagebox  # Импортируем messagebox для отображения диалоговых окон


class InvalidMoveError(Exception):  # Создаем класс исключения для недопустимого хода
    pass  # Пустой блок, который не делает ничего


class TicTacToe(tk.Tk):  # Создаем класс игры "Крестики-нолики", наследуя от класса Tk
    def __init__(self):  # Конструктор класса
        super().__init__()  # Вызываем конструктор базового класса
        self.title("Крестики-нолики")  # Устанавливаем заголовок окна
        self.geometry("180x180")  # Устанавливаем размер окна
        self.current_player = "X"  # Текущий игрок, начинаем с "X"
        self.board = [["" for _ in range(3)] for _ in range(3)]  # Инициализируем игровое поле
        self.create_widgets()  # Вызываем метод создания виджетов

    def create_widgets(self):  # Метод для создания виджетов
        # Создаем матрицу кнопок 3x3
        self.buttons = [[tk.Button(self, text="", font=("Helvetica", 20), width=3, height=1,
                                   command=lambda row=row, col=col: self.make_move(row, col))
                         for col in range(3)] for row in range(3)]

        # Располагаем кнопки на сетке
        for row in range(3):
            for col in range(3):
                self.buttons[row][col].grid(row=row, column=col)

    def make_move(self, row, col):  # Метод для обработки хода
        try:
            if self.board[row][col] != "":  # Если ячейка уже занята
                raise InvalidMoveError("Эта ячейка уже занята!")  # Вызываем исключение
            if self.board[row][col] == "":  # Если ячейка свободна
                self.board[row][col] = self.current_player  # Записываем в ячейку символ текущего игрока
                self.buttons[row][col].config(text=self.current_player)  # Обновляем текст кнопки
                if self.check_winner():  # Проверяем, есть ли победитель
                    messagebox.showinfo("Победа!", f"Игрок {self.current_player} победил!")  # Сообщаем о победе
                    self.reset_game()  # Сбрасываем игру
                elif self.check_draw():  # Проверяем, есть ли ничья
                    messagebox.showinfo("Ничья", "Ничья!")  # Сообщаем о ничьей
                    self.reset_game()  # Сбрасываем игру
                else:  # Если игра продолжается
                    self.current_player = "O" if self.current_player == "X" else "X"  # Меняем игрока
        except InvalidMoveError as e:  # Ловим исключение недопустимого хода
            messagebox.showerror("Ошибка хода", e)  # Выводим сообщение об ошибке

    def check_winner(self):  # Метод для проверки наличия победителя
        # Проверяем строки, столбцы и диагонали на наличие выигрышной комбинации
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] != "":
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] != "":
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != "":
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != "":
            return True
        return False  # Если выигрышной комбинации нет, возвращаем False

    def check_draw(self):  # Метод для проверки наличия ничьей
        # Проверяем все ячейки на наличие пустых, если все заняты, то ничья
        for row in self.board:
            for cell in row:
                if cell == "":
                    return False
        return True  # Если пустых ячеек нет, возвращаем True

    def reset_game(self):  # Метод для сброса игры
        # Очищаем игровое поле и сбрасываем состояние кнопок
        for row in range(3):
            for col in range(3):
                self.board[row][col] = ""
                self.buttons[row][col].config(text="")
        self.current_player = "X"  # Сбрасываем текущего игрока на "X"


# Точка входа в программу
if __name__ == "__main__":
    app = TicTacToe()  # Создаем экземпляр класса игры
    app.mainloop()  # Запускаем главный цикл обработки событий

# В представленном коде игры "Крестики-нолики" используется объектно-ориентированная (ОО) парадигма программирования. Это видно по нескольким ключевым аспектам:
#
# Инкапсуляция: Класс TicTacToe инкапсулирует все данные и методы, необходимые для работы игры, внутри себя. Это включает в себя игровое поле (self.board), текущего игрока (self.current_player), создание виджетов (self.create_widgets) и логику игры (методы make_move, check_winner, check_draw, reset_game).
#
# Абстракция: Класс скрывает сложность реализации от пользователя, предоставляя простой интерфейс для взаимодействия с игрой. Пользователь может играть в "Крестики-нолики", нажимая на кнопки, не заботясь о том, что происходит внутри методов.
#
# Наследование: Класс TicTacToe наследует от класса tk.Tk, что позволяет использовать все методы и свойства родительского класса, такие как title, geometry и mainloop.
#
# Полиморфизм: В данном коде полиморфизм не выражен явно, так как нет переопределения методов или использования интерфейсов. Однако, Tkinter поддерживает полиморфизм, и его можно было бы использовать при расширении функциональности игры, например, добавлении различных уровней сложности.
#
# Эти принципы ОО парадигмы способствуют созданию структурированного и модульного кода, который легче поддерживать и расширять.
